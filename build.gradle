version '1.0'

println "======Gradle version:" + gradle.gradleVersion
if (gradle.gradleVersion.startsWith("7")) {
    println "Gradle 7.x not support yet!\n ====== please use Gradle version from 4.6.x to 6.9.x "
} else if (gradle.gradleVersion.startsWith("6")
    || gradle.gradleVersion.startsWith("5")
    || gradle.gradleVersion.startsWith("4.10")
    || gradle.gradleVersion.startsWith("4.9")
    || gradle.gradleVersion.startsWith("4.8")
    || gradle.gradleVersion.startsWith("4.7")
) {
    println "Gradle with version >= 4.6 detected"
} else {
    println "Gradle with version < 4.6 detected"
}

apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

// In this section you declare where to find the dependencies of your project
repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/"}
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url 'https://dl.bintray.com/ethereum/maven/'}
    mavenLocal()
    mavenCentral()
}


def spring_boot_version="2.7.10"
List spring_boot =[
        "org.springframework.boot:spring-boot-starter-web:$spring_boot_version",
        "org.springframework.boot:spring-boot-starter-jdbc:$spring_boot_version",
        "org.springframework.boot:spring-boot-starter-validation:$spring_boot_version"
]

List mysql = [
    'mysql:mysql-connector-java:8.0.22',
    'org.mybatis:mybatis:3.2.8',
    'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1'
]

List swagger = [
    'io.springfox:springfox-swagger2:2.8.0',
    'io.springfox:springfox-swagger-ui:2.8.0'
]

def log4j_version="2.18.0"
List log4j = [
    "org.apache.logging.log4j:log4j-api:$log4j_version",
    "org.apache.logging.log4j:log4j-core:$log4j_version",
    "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version",
    "org.apache.logging.log4j:log4j-web:$log4j_version",
]

List elasticjob = [
    'org.apache.shardingsphere.elasticjob:elasticjob-lite-core:3.0.0-alpha',
    'io.shardingsphere:sharding-jdbc-spring-boot-starter:3.1.0'
]

List zookeeper = [
    'org.apache.zookeeper:zookeeper:3.6.2',
    'com.github.sgroschupf:zkclient:0.1'
]


List jaxb = [
     "javax.xml.bind:jaxb-api:2.3.0",
     "com.sun.xml.bind:jaxb-impl:2.3.0",
     "com.sun.xml.bind:jaxb-core:2.3.0",
     "javax.activation:activation:1.1.1"
]

def jackson_version = "2.14.2"
List jackson = [
    "com.fasterxml.jackson.core:jackson-databind:$jackson_version",
    "com.fasterxml.jackson.core:jackson-annotations:$jackson_version",
    "com.fasterxml.jackson.core:jackson-core:$jackson_version",
    "com.fasterxml.jackson.module:jackson-module-parameter-names:$jackson_version",
    "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jackson_version",
    "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version",
]

dependencies {

    compile spring_boot,mysql,swagger,log4j,elasticjob,zookeeper,jaxb,jackson
    compile ('org.fisco-bcos.java-sdk:fisco-bcos-java-sdk:3.3.0-SNAPSHOT') {
        exclude group: "org.slf4j"
    }
    // support guomi/ecdsa same time, support solcJ-0.5.2
    compile "org.fisco-bcos:solcJ:0.4.25-rc1"
    compile "org.slf4j:jcl-over-slf4j:1.7.30"
    compile "org.apache.commons:commons-lang3:3.8.1"
    compile "commons-io:commons-io:2.4"
    compile 'com.alibaba:druid:1.1.23'
    compile 'org.projectlombok:lombok:1.18.6'
//    compile 'org.yaml:snakeyaml:2.0'
    compile 'com.lmax:disruptor:3.4.4'
    // cover low version guava
    compile 'com.google.guava:guava:29.0-jre'
    annotationProcessor 'org.projectlombok:lombok:1.18.2'
}

configurations {
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'log4j', module: 'log4j'
    all*.exclude group: 'com.mchange', module: '*'
    all*.exclude group: 'com.fasterxml.jackson', module: 'jackson-bom'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources  {
            srcDir 'src/main/resources'
        }
    }
}

clean {
    delete 'dist'
    delete 'build'
    delete 'log'
    delete 'temp'
}

jar {
    destinationDir file('dist/apps')
    archiveName project.name + '.jar'
    exclude '**/*.xml'
    exclude '**/*.properties'

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/conf_template'
        }
        copy {
            from file('script/')
            into 'dist/script'
        }
        copy {
            from configurations.runtime
            into 'dist/lib'
        }
        copy {
            from file('.').listFiles().findAll{File f -> (f.name.endsWith('.sh') || f.name.endsWith('.env'))}
            into 'dist'
        }
    }
}
